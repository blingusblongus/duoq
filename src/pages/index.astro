---
import Layout from "../layouts/Layout.astro";
import TrackedDuos from "../components/TrackedDuos.astro";
import { Button } from "../components/ui/button";
import {
    Summoner,
    db,
    desc,
    eq,
    Tracked_Duo_Visibility,
    Summoner_Match,
    Tracked_Duo,
    sql,
} from "astro:db";
import { Card } from "../components/ui/card";
import { Separator } from "../components/ui/separator";
import { riotService } from "@/services/RiotService";
import clsx from "clsx";
import { Input } from "@/components/ui/input";

// @ts-expect-error - some typing problem with env.d.ts
const user = Astro.locals.user;
const puuid = user?.puuid!;

let recentGames, summonerStats, tracked_duos;
if (puuid) {
    recentGames = await db
        .select({
            championName: Summoner_Match.championName,
            win: Summoner_Match.win,
            kills: Summoner_Match.kills,
            deaths: Summoner_Match.deaths,
            assists: Summoner_Match.assists,
            healing: Summoner_Match.healing,
            damage: Summoner_Match.damage,
        })
        .from(Summoner_Match)
        .where(eq(Summoner_Match.summonerId, puuid))
        .limit(10)
        .orderBy(desc(Summoner_Match.matchId));

    summonerStats = await db
        .select()
        .from(Summoner)
        .where(eq(Summoner.puuid, puuid))
        .get();

    const sq = sql`
    SELECT 
        CONCAT(S1.game_name, '#', S1.tag_line) as summoner1, CONCAT(S2.game_name, '#', S2.tag_line) as summoner2, 
        ${Tracked_Duo.won_matches}, 
        ${Tracked_Duo.total_matches},
        ${Tracked_Duo_Visibility.id}
    FROM ${Tracked_Duo_Visibility}
    INNER JOIN ${Tracked_Duo} ON ${Tracked_Duo_Visibility.duo_id} = ${Tracked_Duo.id}
    INNER JOIN ${Summoner} AS S1 ON S1.puuid = ${Tracked_Duo.summoner1}
    INNER JOIN ${Summoner} AS S2 ON S2.puuid = ${Tracked_Duo.summoner2}
    WHERE ${Tracked_Duo_Visibility.visibleTo} = ${puuid}`;

    tracked_duos = await db.run(sq).then((res) => res.rows);
    console.log("Tracked Duos", tracked_duos);
}
---

<Layout title="DuoQ | Dashboard">
    <main class="m-3 flex flex-col gap-2">
        <form method="POST" action="/api/update">
            <Button>Fetch Games</Button>
        </form>

        <Separator />

        <div class="flex flex-col gap-2">
            <h1 class="text-2xl font-extrabold">Tracked Users</h1>
            <form
                method="POST"
                action="/api/add-tracked-duo"
                class="flex gap-2"
            >
                <Input
                    name="riot-id"
                    type="text"
                    placeholder="summonerToTrack#NA1"
                />
                <Button>Track New User</Button>
            </form>

            {
                tracked_duos && (
                    <TrackedDuos duos={tracked_duos} />
                    // <div>
                    //     {tracked_duos.map(
                    //         ({
                    //             summoner1,
                    //             summoner2,
                    //             won_matches,
                    //             total_matches,
                    //             id,
                    //         }) => {
                    //             const otherSumm =
                    //                 summoner1 ===
                    //                 user.gameName + "#" + user.tagLine
                    //                     ? summoner2
                    //                     : summoner1;
                    //             const winrate =
                    //                 typeof won_matches === "number" &&
                    //                 typeof total_matches === "number"
                    //                     ? (won_matches / total_matches).toFixed(
                    //                           2,
                    //                       )
                    //                     : "unknkown";
                    //             console.log(id);
                    //             return (
                    //                 <div class="flex">
                    //                     <div>
                    //                         {otherSumm} winrate: {winrate}
                    //                     </div>
                    //                     <form method="DELETE" action=`api/delete-duo-visibility/${id}`>
                    //                         <Button>Delete</Button>
                    //                     </form>
                    //                 </div>
                    //             );
                    //         },
                    //     )}
                    // </div>
                )
            }
        </div>

        <Separator />

        {
            summonerStats && (
                <div>
                    Games Tracked: {summonerStats.games_tracked} | Win%:{" "}
                    {(
                        (summonerStats.games_won /
                            summonerStats.games_tracked) *
                        100
                    ).toFixed(2)}
                    %{" "}
                </div>
            )
        }

        <Separator />

        <h1 class="text-2xl font-extrabold">Recent Games</h1>
        {
            recentGames &&
                recentGames.map(
                    ({
                        championName,
                        win,
                        kills,
                        deaths,
                        assists,
                        healing,
                        damage,
                    }) => {
                        return (
                            <Card
                                className={clsx([
                                    "grid grid-cols-4 p-2 transition-all hover:scale-[1.02]",
                                    win
                                        ? "bg-green-900 hover:bg-green-800"
                                        : "bg-red-900 hover:bg-red-800",
                                ])}
                            >
                                <img
                                    width="30px"
                                    height="30px"
                                    src={riotService.getSquareImgUrl(
                                        championName,
                                    )}
                                    alt={championName}
                                />
                                <div>
                                    {kills} / {deaths} / {assists}
                                </div>
                                <div>Heal: {healing}</div>
                                <div>Damage: {damage}</div>
                            </Card>
                        );
                    },
                )
        }
    </main>
</Layout>
