---
import Layout from "../layouts/Layout.astro";
import { Button } from "../components/ui/button";
import { Summoner, db, desc, eq } from "astro:db";
import { Summoner_Match } from "astro:db";
import { Card } from "../components/ui/card";
import { Separator } from "../components/ui/separator";
import { riotService } from "@/services/RiotService";
import clsx from "clsx";

const user = Astro.locals.user;
const puuid = user?.puuid!;

let recentGames, summonerStats;
if (puuid) {
    summonerStats = await db
        .select()
        .from(Summoner)
        .where(eq(Summoner.puuid, puuid))
        .get();

    recentGames = await db
        .select({
            championName: Summoner_Match.championName,
            win: Summoner_Match.win,
            kills: Summoner_Match.kills,
            deaths: Summoner_Match.deaths,
            assists: Summoner_Match.assists,
            healing: Summoner_Match.healing,
            damage: Summoner_Match.damage,
        })
        .from(Summoner_Match)
        .where(eq(Summoner_Match.summonerId, puuid))
        .limit(10)
        .orderBy(desc(Summoner_Match.matchId));
}
---

<Layout title="DuoQ | Dashboard">
    <main class="m-3 flex flex-col gap-2">
        <form method="POST" action="/api/update">
            <Button>Refresh</Button>
        </form>
        <!-- <pre> -->
        <!--     {JSON.stringify(summonerStats, null, 2)} -->
        <!-- </pre> -->

        {
            summonerStats && (
                <div>
                    Games Tracked: {summonerStats.games_tracked} | Win%:{" "}
                    {(
                        (summonerStats.games_won /
                            summonerStats.games_tracked) *
                        100
                    ).toFixed(2)}
                    %{" "}
                </div>
            )
        }

        <Separator />

        <h1 class="text-2xl font-extrabold">Recent Games</h1>
        {
            recentGames &&
                recentGames.map(
                    ({
                        championName,
                        win,
                        kills,
                        deaths,
                        assists,
                        healing,
                        damage,
                    }) => {
                        return (
                            <Card
                                className={clsx([
                                    "grid grid-cols-4 p-2 transition-all hover:scale-[1.02]",
                                    win
                                        ? "bg-green-900 hover:bg-green-800"
                                        : "bg-red-900 hover:bg-red-800",
                                ])}
                            >
                                <img
                                    width="30px"
                                    height="30px"
                                    src={riotService.getSquareImgUrl(
                                        championName,
                                    )}
                                    alt={championName}
                                />
                                <div>
                                    {kills} / {deaths} / {assists}
                                </div>
                                <div>Heal: {healing}</div>
                                <div>Damage: {damage}</div>
                            </Card>
                        );
                    },
                )
        }
    </main>
</Layout>
